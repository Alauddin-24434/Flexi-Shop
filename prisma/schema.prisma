generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // relation
  shops     Shop[]
  profiles  Profile[]
  Order     Order[]
  Review    Review[]
}

model Profile {
  id             String   @id @default(cuid())
  userId         String
  name           String
  age            Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  // relation
  user           User     @relation(fields: [userId], references: [id])
  followingShops Shop[]   @relation("Followers")
}

model Shop {
  id         String      @id @default(cuid())
  name       String
  sellerId   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  // relation
  seller     User        @relation(fields: [sellerId], references: [id])
  followers  Profile[]   @relation("Followers")
  products   Product[]
  orderItems OrderItem[] // Added relation field
}

model Product {
  id               String      @id @default(cuid())
  name             String
  description      String
  price            Float
  shopId           String
  isDeleted        Boolean     @default(false)
  stock            Int
  discount         Float
  productThumbnail String
  productImages    String[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  // relation
  shop             Shop        @relation(fields: [shopId], references: [id])
  category         Category    @relation(fields: [categoryId], references: [id])
  categoryId       String
  OrderItem        OrderItem[]
  Review           Review[]
  FlashSale        FlashSale[]
}

model Category {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  // relation
  products  Product[]
}

model FlashSale {
  id        String   @id @default(cuid())
  productId String
  discount  Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  // relation
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  // relation
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  Payment     Payment[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  shopId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  // relation
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Float
  status        PaymentStatus @default(UNPAID)
  role          UserRole
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  // relation
  order         Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  // relation
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Coupon {
  id        String   @id @default(cuid())
  code      String
  discount  Float
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PAID
  UNPAID
}
